
// ZDoom action specials

#ifdef NAMESPACE_ZDOOM
action_specials
{
	clearexisting;

	// These keywords are from Boom's generalized specials
	arg door_speed
	{
		name = "Speed";
		type = speed;
		custom_values
		{
			16 = "slow - standard Doom door";
			32 = "normal";
			64 = "fast - fast Doom door";
			128 = "turbo";
		}
	}
	arg lift_speed
	{
		name = "Speed";
		type = speed;
		custom_values
		{
			4 = "very slow - perpetual Doom lift";
			8 = "slow";
			16 = "normal";
			32 = "fast - standard Doom lift";
			64 = "turbo - fast Doom lift";
		}
	}
	arg floor_speed
	{
		name = "Speed";
		type = speed;
		custom_values
		{
			8 = "slow - standard Doom floor";
			16 = "normal";
			32 = "fast - fast Doom floor";
			64 = "turbo";
		}
	}
	arg ceiling_speed
	{
		name = "Speed";
		type = speed;
		custom_values
		{
			8 = "slow - standard Doom ceiling";
			16 = "normal";
			32 = "fast - fast Doom ceiling";
			64 = "turbo";
		}
	}
	arg crusher_speed
	{
		name = "Speed";
		type = speed;
		custom_values
		{
			8 = "slow - standard Doom crusher";
			16 = "normal - fast Doom crusher";
			32 = "fast";
			64 = "turbo";
		}
	}
	arg stair_speed
	{
		name = "Speed";
		type = speed;
		custom_values
		{
			2 = "slow - standard Doom stairs";
			4 = "normal";
			16 = "fast";
			32 = "turbo - fast Doom stairs";
		}
	}
	arg donut_speed
	{
		name = "Speed";
		type = speed;
		custom_values
		{
			2 = "slow";
			4 = "normal - standard Doom donut";
			16 = "fast";
			32 = "turbo";
		}
	}
	arg crush_mode
	{
		name = "Crush mode";
		type = choice;
		custom_values
		{
			0 = "use current game's default";
			1 = "Doom mode - keep moving while crushing";
			2 = "Hexen mode - stop moving until actor dies/leaves";
		}
	}
	arg means_of_death
	{
		name = "Means of death";
		type = choice;
		custom_values
		{
			0 = "generic damage";
			5 = "rocket";
			6 = "rocket splash damage";
			7 = "plasma";
			8 = "BFG ball";
			9 = "BFG tracer";
			10 = "chainsaw";
			11 = "shotgun";
			12 = "drowning";
			13 = "slime - Doom's damaging floors";
			14 = "lava/fire";
			15 = "crusher";
			16 = "telefrag";
			17 = "falling";
			18 = "suicide";
			19 = "barrel";
			20 = "exit - used in deathmatch";
			21 = "generic splash damage";
			22 = "generic melee damage";
			23 = "railgun";
			24 = "ice";
			25 = "disintegration";
			26 = "poison";
			27 = "electricity";
			1000 = "massacre - console cheat";
		}
	}

	group "Floors"
	{
		tagged = sector_or_back;

		special 200
		{
			name = "Generic_Floor";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Distance";
			arg4 {
				name = "Target";
				type = choice;
				custom_values {
					0 = "Move by given distance";
					1 = "Move to highest neighboring floor";
					2 = "Move to lowest neighboring floor";
					3 = "Move to nearest neighboring floor";
					4 = "Move to lowest neighboring ceiling";
					5 = "Move to sector's own ceiling";
					6 = "Move by height of shortest lower texture";
				}
			}
			arg5 {
				name = "Flags";
				type = flags;
				custom_flags {
					0 = "Don't copy";
					1 = "Copy floor texture; remove sector special";
					2 = "Copy floor texture";
					3 = "Copy floor texture and sector special";
					4 = "Copy from neighbor (otherwise front of trigger line)";
					8 = "Raise (otherwise lower)";
					16 = "Inflict crushing damage";
				}
			}
		}
		special 22
		{
			name = "Floor_LowerToNearest";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
		}
		special 21
		{
			name = "Floor_LowerToLowest";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
		}
		special 241
		{
			name = "Floor_LowerToLowestTxTy";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
		}
		special 242
		{
			name = "Floor_LowerToHighest";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Lip + 128";
			arg4 = "Always Adjust?", "If 1, the height adjustment is applied even if neighbouring sectors are at the same floor height";
		}
		special 20
		{
			name = "Floor_LowerByValue";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Value";
		}
		special 36
		{
			name = "Floor_LowerByValueTimes8";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Eighth of Value";
		}
		special 66
		{
			name = "Floor_LowerInstant";
			arg1 = "Sector Tag";
			arg2 = "Unused";
			arg3 = "Eighth of Value";
		}
		special 25
		{
			name = "Floor_RaiseToNearest";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
		}
		special 24
		{
			name = "Floor_RaiseToHighest";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
		}
		special 238
		{
			name = "Floor_RaiseToLowestCeiling";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
		}
		special 23
		{
			name = "Floor_RaiseByValue";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Value";
		}
		special 35
		{
			name = "Floor_RaiseByValueTimes8";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Eighth of Value";
		}
		special 239
		{
			name = "Floor_RaiseByValueTxTy";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Value";
		}
		special 240
		{
			name = "Floor_RaiseByTexture";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
		}
		special 67
		{
			name = "Floor_RaiseInstant";
			arg1 = "Sector Tag";
			arg2 = "Unused";
			arg3 = "Eighth of Value";
		}
		special 28
		{
			name = "Floor_RaiseAndCrush";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Crush Damage";
			arg4 = $crush_mode;
		}
		special 46
		{
			name = "Floor_CrushStop";
			arg1 = "Sector Tag";
		}
		special 37
		{
			name = "Floor_MoveToValue";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Value";
			arg4 = "Negative?";
		}
		special 68
		{
			name = "Floor_MoveToValueTimes8";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Eighth of Value";
			arg4 = "Negative?";
		}
		special 250
		{
			name = "Floor_Donut";
			arg1 = "Pillar Sector Tag";
			arg2 = "Pillar Speed";
			arg3 = "Surrounding Speed";
		}
		special 138
		{
			name = "Floor_Waggle";
			arg1 = "Sector Tag";
			arg2 = "Amplitude";
			arg3 = $floor_speed;
			arg4 = "Phase Offset";
			arg5 = "Duration (in seconds)";
		}
		special 235
		{
			name = "Floor_TransferTrigger";
			arg1 = "Sector Tag";
		}
		special 236
		{
			name = "Floor_TransferNumeric";
			arg1 = "Sector Tag";
		}
	}

	group "Ceilings"
	{
		tagged = sector_or_back;

		special 201
		{
			name = "Generic_Ceiling";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Distance";
			arg4 {
				name = "Target";
				type = choice;
				custom_values {
					0 = "Move by given distance";
					1 = "Move to highest neighboring ceiling";
					2 = "Move to lowest neighboring ceiling";
					3 = "Move to nearest neighboring ceiling";
					4 = "Move to highest neighboring floor";
					5 = "Move to sector's own floor";
					6 = "Move by height of shortest upper texture";
				}
			}
			arg5 {
				name = "Flags";
				type = flags;
				custom_flags {
					0 = "Don't copy";
					1 = "Copy ceiling texture; remove sector special";
					2 = "Copy ceiling texture";
					3 = "Copy ceiling texture and sector special";
					4 = "Copy from neighbor (otherwise front of trigger line)";
					8 = "Raise (otherwise lower)";
					16 = "Inflict crushing damage";
				}
			}
		}
		special 205
		{
			name = "Generic_Crusher";
			arg1 = "Sector Tag";
			arg2 = "Lowering Speed";
			arg3 = "Raising Speed";
			arg4 = "Silent?";
			arg5 = "Crush Damage";
		}
		special 169
		{
			name = "Generic_Crusher2";
			arg1 = "Sector Tag";
			arg2 = "Lowering Speed";
			arg3 = "Raising Speed";
			arg4 {
				name = "Silent?";
				type = yesno;
			}
			arg5 = "Crush Damage";
		}
		special 253
		{
			name = "Ceiling_LowerToLowest";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
		}
		special 254
		{
			name = "Ceiling_LowerToFloor";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
		}
		special 192
		{
			name = "Ceiling_LowerToHighestFloor";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
		}
		special 40
		{
			name = "Ceiling_LowerByValue";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Value";
		}
		special 199
		{
			name = "Ceiling_LowerByValueTimes8";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Eighth of Value";
		}
		special 193
		{
			name = "Ceiling_LowerInstant";
			arg1 = "Sector Tag";
			arg2 = "Unused";
			arg3 = "Eighth of Value";
		}
		special 252
		{
			name = "Ceiling_RaiseToNearest";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
		}
		special 41
		{
			name = "Ceiling_RaiseByValue";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Value";
		}
		special 198
		{
			name = "Ceiling_RaiseByValueTimes8";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Eighth of Value";
		}
		special 194
		{
			name = "Ceiling_RaiseInstant";
			arg1 = "Sector Tag";
			arg2 = "Unused";
			arg3 = "Eighth of Value";
		}
		special 47
		{
			name = "Ceiling_MoveToValue";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Value";
			arg4 = "Negative?";
		}
		special 69
		{
			name = "Ceiling_MoveToValueTimes8";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Eighth of Value";
			arg4 = "Negative?";
		}
		special 38 // [RH] Complement of Floor_Waggle
		{
			name = "Ceiling_Waggle";
			arg1 = "Sector Tag";
			arg2 = "Amplitude";
			arg3 = $ceiling_speed;
			arg4 = "Phase Offset";
			arg5 = "Duration (in seconds)";
		}
		special 43
		{
			name = "Ceiling_LowerAndCrush";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Crush Damage";
			arg4 = $crush_mode;
		}
		special 97
		{
			name = "Ceiling_LowerAndCrushDist";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Crush Damage";
			arg4 = "Distance to Floor";
			arg5 = $crush_mode;
		}
		special 42
		{
			name = "Ceiling_CrushAndRaise";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Crush Damage";
			arg4 = $crush_mode;
		}
		special 196
		{
			name = "Ceiling_CrushAndRaiseA";
			arg1 = "Sector Tag";
			arg2 = "Lowering Speed";
			arg3 = "Raising Speed";
			arg4 = "Crush Damage";
			arg5 = $crush_mode;
		}
		special 197
		{
			name = "Ceiling_CrushAndRaiseSilentA";
			arg1 = "Sector Tag";
			arg2 = "Lowering Speed";
			arg3 = "Raising Speed";
			arg4 = "Crush Damage";
			arg5 = $crush_mode;
		}
		special 168
		{
			name = "Ceiling_CrushAndRaiseDist";
			arg1 = "Sector Tag";
			arg2 = "Distance to Floor";
			arg3 = $ceiling_speed;
			arg4 = "Crush Damage";
			arg5 = $crush_mode;
		}
		special 104
		{
			name = "Ceiling_CrushAndRaiseSilentDist";
			arg1 = "Sector Tag";
			arg2 = "Distance to Floor";
			arg3 = $ceiling_speed;
			arg4 = "Crush Damage";
			arg5 = $crush_mode;
		}
		special 45
		{
			name = "Ceiling_CrushRaiseAndStay";
			arg1 = "Sector Tag";
			arg2 = $ceiling_speed;
			arg3 = "Crush Damage";
			arg4 = $crush_mode;
		}
		special 195
		{
			name = "Ceiling_CrushRaiseAndStayA";
			arg1 = "Sector Tag";
			arg2 = "Lowering Speed";
			arg3 = "Raising Speed";
			arg4 = "Crush Damage";
			arg5 = $crush_mode;
		}
		special 255
		{
			name = "Ceiling_CrushRaiseAndStaySilA";
			arg1 = "Sector Tag";
			arg2 = "Lowering Speed";
			arg3 = "Raising Speed";
			arg4 = "Crush Damage";
			arg5 = $crush_mode;
		}
		special 44
		{
			name = "Ceiling_CrushStop";
			arg1 = "Sector Tag";
		}
	}

	group "Doors"
	{
		// Group defaults
		tagged = sector_or_back;

		special 202
		{
			name = "Generic_Door";
			arg1 = "Sector Tag";
			arg2 = $door_speed;
			arg3 {
				name = "Door Kind";
				type = choice;
				custom_values {
					0 = "Raise door, close after delay";
					1 = "Open door";
					2 = "Close door, open after delay";
					3 = "Close door";
				}
			}
			arg4 = "Delay";
			arg5 = "Lock";
		}
		special 12
		{
			name = "Door_Raise";
			arg1 = "Sector Tag";
			arg2 = $door_speed;
			arg3 = "Delay";
			arg4 = "Light Tag";
		}
		special 13
		{
			name = "Door_LockedRaise";
			arg1 = "Sector Tag";
			arg2 = $door_speed;
			arg3 = "Delay";
			arg4 = "Lock";
			arg5 = "Light Tag";
		}
		special 11
		{
			name = "Door_Open";
			arg1 = "Sector Tag";
			arg2 = $door_speed;
			arg3 = "Light Tag";
		}
		special 10
		{
			name = "Door_Close";
			arg1 = "Sector Tag";
			arg2 = $door_speed;
			arg3 = "Light Tag";
		}
		special 249
		{
			name = "Door_CloseWaitOpen";
			arg1 = "Sector Tag";
			arg2 = $door_speed;
			arg3 = "Delay";
			arg4 = "Light Tag";
		}
		special 14
		{
			name = "Door_Animated";
			arg1 = "Sector Tag";
			arg2 = $door_speed;
			arg3 = "Delay";
			arg4 = "Lock";
		}
	}

	group "Platforms & Lifts"
	{
		tagged = sector_or_back;

		special 203
		{
			name = "Generic_Lift";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 {
				name = "Delay (in octics)";
				desc = "Doom default is 24 octics (3 seconds)";
			}
			arg4 {
				name = "Lift Type";
				type = choice;
				custom_values {
					0 = "Raise by value * 8, lower after delay";
					1 = "Lower to lowest floor with lip of 8, raise after delay";
					2 = "Lower to nearest floor, raise after delay";
					3 = "Lower to lowest ceiling, raise after delay";
					4 = "Perpetual lift between lowest and highest floors";
				}
			}
			arg5 = "Value (for lift type 0)";
		}
		special 62
		{
			name = "Plat_DownWaitUpStay";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Delay (in tics)";
		}
		special 206
		{
			name = "Plat_DownWaitUpStayLip";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Delay (in tics)";
			arg4 = "Lip";
			arg5 {
				name = "Sound type";
				type = choice;
				custom_values {
					0 = "Use platform sound";
					1 = "Use moving floor sound";
				}
			}
		}
		special 63
		{
			name = "Plat_DownByValue";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Delay (in tics)";
			arg4 = "Eighth of Value";
		}
		special 64
		{
			name = "Plat_UpWaitDownStay";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Delay (in tics)";
		}
		special 172
		{
			name = "Plat_UpNearestWaitDownStay";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Delay (in tics)";
		}
		special 65
		{
			name = "Plat_UpByValue";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Delay (in tics)";
			arg4 = "Eighth of Value";
		}
		special 230
		{
			name = "Plat_UpByValueStayTx";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Eighth of Value";
		}
		special 228
		{
			name = "Plat_RaiseAndStayTx0";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
		}
		special 60
		{
			name = "Plat_PerpetualRaise";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Delay (in tics)";
		}
		special 207
		{
			name = "Plat_PerpetualRaiseLip";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Delay (in tics)";
			arg4 = "Lip";
		}
		special 231
		{
			name = "Plat_ToggleCeiling";
			arg1 = "Sector Tag";
		}
		special 61
		{
			name = "Plat_Stop";
			arg1 = "Sector Tag";
		}
	}

	group "Elevators & Pillars"
	{
		tagged = sector_or_back;

		special 95
		{
			name = "FloorAndCeiling_LowerByValue";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Value";
		}
		special 96
		{
			name = "FloorAndCeiling_RaiseByValue";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
			arg3 = "Value";
		}
		special 251
		{
			name = "FloorAndCeiling_LowerRaise";
			arg1 = "Sector Tag";
			arg2 = "Floor Lower Speed";
			arg3 = "Ceiling Raise Speed";
			arg4 = "Boom Bug Emulation", "Use value 1998 to emulate a Boom bug";
		}
		special 247
		{
			name = "Elevator_LowerToNearest";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
		}
		special 245
		{
			name = "Elevator_RaiseToNearest";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
		}
		special 246
		{
			name = "Elevator_MoveToFloor";
			arg1 = "Sector Tag";
			arg2 = $lift_speed;
		}
		special 30
		{
			name = "Pillar_Open";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Floor Lower Value", "0 = Lowest Adjacent Floor";
			arg4 = "Ceiling Raise Value", "0 = Highest Adjacent Ceiling";
		}
		special 29
		{
			name = "Pillar_Build";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Floor Height", "0 = Halfway Point";
		}
		special 94
		{
			name = "Pillar_BuildAndCrush";
			arg1 = "Sector Tag";
			arg2 = $floor_speed;
			arg3 = "Floor Height", "0 = Halfway Point";
			arg4 = "Crushing Damage";
			arg5 = "Crushing Mode";
		}
		special 48
		{
			name = "Sector_Attach3dMidtex";
			arg1 = "Line ID";
			arg2 = "Sector Tag";
			arg3 {
				name = "Plane";
				type = choice;
				custom_values {
					0 = "floor";
					1 = "ceiling";
				}
			}
			tagged = ex_1line_2sector;
		}
	}

	group "Stair Builders"
	{
		tagged = sector;

		special 204
		{
			name = "Generic_Stairs";
			arg1 = "Sector Tag";
			arg2 = $stair_speed;
			arg3 = "Step Height";
			arg4
			{
				name = "Flags";
				type = flags;
				custom_flags
				{
					0 = "build stairs down";
					1 = "build stairs up";
					2 = "ignore floor textures when finding stairs";
				}
			}
			arg5 = "Reset Delay (in tics)";
		}
		special 26
		{
			name = "Stairs_BuildDown";
			arg1 = "Sector Tag";
			arg2 = $stair_speed;
			arg3 = "Step Height";
			arg4 = "Step Delay (in tics)";
			arg5 = "Reset Delay (in tics)";
		}
		special 31
		{
			name = "Stairs_BuildDownSync";
			arg1 = "Sector Tag";
			arg2 = $stair_speed;
			arg3 = "Step Height";
			arg4 = "Reset Delay (in tics)";
		}
		special 27
		{
			name = "Stairs_BuildUp";
			arg1 = "Sector Tag";
			arg2 = $stair_speed;
			arg3 = "Step Height";
			arg4 = "Step Delay (in tics)";
			arg5 = "Reset Delay (in tics)";
		}
		special 32
		{
			name = "Stairs_BuildUpSync";
			arg1 = "Sector Tag";
			arg2 = $stair_speed;
			arg3 = "Step Height";
			arg4 = "Reset Delay (in tics)";
		}
		special 217
		{
			name = "Stairs_BuildUpDoom";
			arg1 = "Sector Tag";
			arg2 = $stair_speed;
			arg3 = "Step Height";
			arg4 = "Step Delay (in tics)";
			arg5 = "Reset Delay (in tics)";
		}
	}

	group "Sector"
	{
		tagged = sector;

		special 181
		{
			name = "Plane_Align";
			arg1 {
				name = "Floor";
				type = choice;
				custom_values {
					0 = "don't align";
					1 = "align front to back";
					2 = "align back to front";
				}
			}
			arg2 {
				name = "Ceiling";
				type = choice;
				custom_values {
					0 = "don't align";
					1 = "align front to back";
					2 = "align back to front";
				}
			}
			arg3 = "Line ID";
			tagged = ex_3lineid;
		}
		special 118
		{
			name = "Plane_Copy";
			arg1 = "Front Floor Tag";
			arg2 = "Front Ceiling Tag";
			arg3 = "Back Floor Tag";
			arg4 = "Back Ceiling Tag";
			arg5
			{
				name = "Share Flags";
				type = flags;
				custom_flags
				{
					1 = "copy floor front to back";
					2 = "copy floor back to front";
					4 = "copy ceiling front to back";
					8 = "copy ceiling back to front";
				}
			}
			tagged = ex_1sector_2sector_3sector_4sector;
		}
		special 160
		{
			name = "Sector_Set3DFloor";
			arg1 = "Sector Tag";
			arg2 {
				name = "Type";
				type = flags;
				custom_flags {
					0 = "Vavoom";
					1 = "solid";
					2 = "swimmable";
					3 = "non-solid";
					4 = "draw inside of floor (don't use with Vavoom)";
					8 = "arg 5 is LineID (don't use in UDMF)";
					16 = "invert visibility";
					32 = "invert shootability";
				}
			}
			arg3 {
				name = "Flags";
				type = flags;
				custom_flags {
					1 = "disable lighting effects";
					2 = "restrict lighting to inside of floor";
					4 = "pseudo-fog";
					8 = "flat floor at ceiling height";
					16 = "use upper texture";
					32 = "use lower texture";
					64 = "use additive translucency";
				}
			}
			arg4 = "Opacity", "On a 0--255 scale from fully transparent to fully opaque";
			arg5 = "Hi-Tag/Line ID", "Don't use this one in UDMF";
		}
		special 51
		{
			name = "Sector_SetLink";
			arg1 = "Control Tag";
			arg2 = "Sector Tag";
			arg3 {
				name = "Plane";
				type = choice;
				custom_values {
					0 = "floor";
					1 = "ceiling";
				}
			}
			arg4 {
				name = "Link flags";
				type = flags;
				custom_flags {
					1 = "floor to surface";
					2 = "ceiling to surface";
					4 = "invert floor movement";
					8 = "invert ceiling movement";
				}
			}
			tagged = ex_1sector_2sector;
		}
		special 190
		{
			name = "Static_Init";
			arg1 = "Sector Tag/Line ID";
			arg2
			{
				name = "Property";
				type = "choice";
				custom_values
				{
					0 = "set gravity";
					1 = "set light or fog color from upper/lower texture";
					2 = "set damage from linedef length";
					3 = "sector link";
					255 = "set sky from upper texture";
				}
			}
			arg3 = "Ceiling/Flip?", "Property 3: use ceiling instead of floor as control surface; Property 255: flip sky texture horizontally";
			arg4
			{
				name = "Move Type";
				desc = "Only used when Property is 3";
				type = flags;
				custom_flags
				{
					1 = "floor to surface";
					2 = "ceiling to surface";
					4 = "invert floor movement";
					8 = "invert ceiling movement";
				}
			}
			tagged = ex_sector_2is3_line;
		}
		special 54
		{
			name = "Sector_ChangeFlags";
			arg1 = "Sector Tag";
			arg2 {
				name = "Set flags";
				type = flags;
				custom_flags {
					1 = "silent";
					2 = "nofallingdamage";
					4 = "dropactors";
					8 = "norespawn";
				}
			}
			arg3 {
				name = "Clear flags";
				type = flags;
				custom_flags {
					1 = "silent";
					2 = "nofallingdamage";
					4 = "dropactors";
					8 = "norespawn";
				}
			}
		}
		special 140
		{
			name = "Sector_ChangeSound";
			arg1 = "Sector Tag";
			arg2 = "Sound Sequence", "Index of sequence in SNDSEQ";
		}
		special 185
		{
			name = "Sector_SetRotation";
			arg1 = "Sector Tag";
			arg2 = "Floor Angle";
			arg3 = "Ceiling Angle";
		}
		special 187
		{
			name = "Sector_SetFloorPanning";
			arg1 = "Sector Tag";
			arg2 = "U Offset";
			arg3 = "V Offset";
			arg4 = "U Frac", "One hundredth of this value is added to U offset";
			arg5 = "V Frac", "One hundredth of this value is added to V offset";
		}
		special 186
		{
			name = "Sector_SetCeilingPanning";
			arg1 = "Sector Tag";
			arg2 = "U Offset";
			arg3 = "V Offset";
			arg4 = "U Frac", "One hundredth of this value is added to U offset";
			arg5 = "V Frac", "One hundredth of this value is added to V offset";
		}
		special 189
		{
			name = "Sector_SetFloorScale";
			arg1 = "Sector Tag";
			arg2 = "U Offset";
			arg3 = "U Frac", "One hundredth of this value is added to U offset";
			arg4 = "V Offset";
			arg5 = "V Frac", "One hundredth of this value is added to V offset";
		}
		special 188
		{
			name = "Sector_SetCeilingScale";
			arg1 = "Sector Tag";
			arg2 = "U Offset";
			arg3 = "U Frac", "One hundredth of this value is added to U offset";
			arg4 = "V Offset";
			arg5 = "V Frac", "One hundredth of this value is added to V offset";
		}
		arg line_align_sector
		{
			name = "Align to";
			type = choice;
			custom_values
			{
				0 = "front sector";
				1 = "back sector";
			}
		}
		special 184
		{
			name = "Line_AlignFloor";
			arg1 = "Line ID";
			arg2 = $line_align_sector;
			tagged = line;
		}
		special 183
		{
			name = "Line_AlignCeiling";
			arg1 = "Line ID";
			arg2 = $line_align_sector;
			tagged = line;
		}
		special 212
		{
			name = "Sector_SetColor";
			arg1 = "Sector Tag";
			arg2 = "Red";
			arg3 = "Green";
			arg4 = "Blue";
			arg5 = "Desaturation";
		}
		special 213
		{
			name = "Sector_SetFade";
			arg1 = "Sector Tag";
			arg2 = "Red";
			arg3 = "Green";
			arg4 = "Blue";
		}
		special 214
		{
			name = "Sector_SetDamage";
			arg1 = "Sector Tag";
			arg2 = "Amount";
			arg3 = $means_of_death;
		}
		special 216
		{
			name = "Sector_SetGravity";
			arg1 = "Sector Tag";
			arg2 = "Gravity Multiplier", "Integral part of the gravity multiplier";
			arg3 = "Fraction", "Fractional part of the gravity multiplier";
		}
		special 218
		{
			name = "Sector_SetWind";
			arg1 = "Sector Tag", "Remember that the sector needs to have the 'pusher/puller/wind enabled' flag";
			arg2 = "Strength";
			arg3 = "Angle";
			arg4 = "Use Line?", "If 1, wind strength and angle are derived from the length and orientation of the linedef itself, instead of previous args.";
		}
		special 219
		{
			name = "Sector_SetFriction";
			arg1 = "Sector Tag";
			arg2 = "Amount", "0: value taken from linedef length; 1-127: increased friction (sludgy), 128: normal friction, 129-255: decreased friction (icy)";
		}
		special 220
		{
			name = "Sector_SetCurrent";
			arg1 = "Sector Tag", "Remember that the sector needs to have the 'pusher/puller/wind enabled' flag";
			arg2 = "Strength";
			arg3 = "Angle";
			arg4 = "Use Line?", "If 1, current strength and angle are derived from the length and orientation of the linedef itself, instead of previous args.";
		}
		special 227
		{
			name = "PointPush_SetForce";
			arg1 = "Sector Tag";
			arg2 = "Thing ID", "TID of the pusher or puller";
			arg3 = "Strength";
			arg4 = "Use Line?", "If 1, pusher/puller strength is derived from the length of the linedef itself, instead of previous arg.";
			tagged = ex_1sector_2thing;
		}
		special 161
		{
			name = "Sector_SetContents (OpenGL)";
			arg1 {
				name = "Content Type";
				type = choice;
				custom_values {
					0 = "empty";
					1 = "water";
					2 = "lava";
					3 = "nukage";
					4 = "slime";
					5 = "hellslime";
					6 = "blood";
					7 = "sludge";
					8 = "hazard";
					9 = "Boom water";
				}
			}
			arg2 = "Translucency %", "0 is fully opaque, 100 is invisible";
			arg3 {
				name = "Flags";
				type = flags;
				custom_flags {
					1 = "don't block movement";
					2 = "don't block sight";
					4 = "don't block shooting";
					8 = "use additive translucency";
				}
			}
		}
		/*special 170
		{
			// This special can only be used in ACS
			name = "Sector_SetCeilingScale2";
		}
		special 171
		{
			// This special can only be used in ACS
			name = "Sector_SetFloorScale2";
		}*/
	}

	group "Lighting"
	{
		tagged = sector;

		special 109
		{
			name = "Light_ForceLightning";
			arg1 {
				name = "Mode";
				type = choice;
				custom_values {
					0 = "immediate flash and set lightning mode";
					1 = "single flash without setting lightning mode";
					2 = "unset lightning mode";
				}
			}
			tagged = no;
		}
		special 233
		{
			name = "Light_MinNeighbor";
			arg1 = "Sector Tag";
		}
		special 111
		{
			name = "Light_LowerByValue";
			arg1 = "Sector Tag";
			arg2 = "Value";
		}
		special 234
		{
			name = "Light_MaxNeighbor";
			arg1 = "Sector Tag";
		}
		special 110
		{
			name = "Light_RaiseByValue";
			arg1 = "Sector Tag";
			arg2 = "Value";
		}
		special 112
		{
			name = "Light_ChangeToValue";
			arg1 = "Sector Tag";
			arg2 = "Value";
		}
		special 113
		{
			name = "Light_Fade";
			arg1 = "Sector Tag";
			arg2 = "Value";
			arg3 = "Fade Length", "Number of tics to reach the new value";
		}
		special 114
		{
			name = "Light_Glow";
			arg1 = "Sector Tag";
			arg2 = "Upper Light Level";
			arg3 = "Lower Light Level";
			arg4 = "Fade Length", "Number of tics to alternate between both values";
		}
		special 115
		{
			name = "Light_Flicker";
			arg1 = "Sector Tag";
			arg2 = "Upper Light Level";
			arg3 = "Lower Light Level";
		}
		special 116
		{
			name = "Light_Strobe";
			arg1 = "Sector Tag";
			arg2 = "Upper Light Level";
			arg3 = "Lower Light Level";
			arg4 = "Upper Length", "Number of tics to stay at upper level";
			arg5 = "Lower Length", "Number of tics to stay at lower level";
		}
		special 232
		{
			name = "Light_StrobeDoom";
			arg1 = "Sector Tag";
			arg2 = "Upper Length", "Number of tics to stay at normal level";
			arg3 = "Lower Length", "Number of tics to stay at lowest neighboring level";
		}
		special 117
		{
			name = "Light_Stop";
			arg1 = "Sector Tag";
		}
	}

	group "Teleporters"
	{
		tagged = ex_1thing_2sector;

		special 70
		{
			name = "Teleport";
			arg1 = "Dest Thing ID";
			arg2 = "Dest Sector Tag";
			arg3 = "No Source Fog?";
		}
		special 39 // [RH] Needed for Strife
		{
			name = "Teleport_ZombieChanger";
			arg1 = "Dest Thing ID";
			arg2 = "Dest Sector Tag";
		}
		special 71
		{
			name = "Teleport_NoFog";
			arg1 = "Dest Thing ID";
			arg2 = "Change Facing?";
			arg3 = "Dest Sector Tag";
			tagged = ex_1thing_3sector;
		}
		special 76
		{
			name = "TeleportOther";
			arg1 = "Target Thing ID";
			arg2 = "Dest Thing ID";
			arg3 = "Use Fog?";
			tagged = ex_1thing_2thing;
		}
		special 77
		{
			name = "TeleportGroup";
			arg1 = "Target Thing ID", "0 Teleports the activator";
			arg2 = "Source Thing ID", "Must be a teleport destination";
			arg3 = "Dest Thing ID", "Must be a teleport destination";
			arg4 = "Move Source?";
			arg5 = "Use Fog?";
			tagged = ex_1thing_2thing_3thing;
		}
		special 78
		{
			name = "TeleportInSector";
			arg1 = "Sector Tag";
			arg2 = "Source Thing ID", "Must be a teleport destination";
			arg3 = "Dest Thing ID", "Must be a teleport destination";
			arg4 = "Use Fog?";
			arg5 = "Group Thing ID";
			tagged = ex_1sector_2thing_3thing_5thing;
		}
		special 154
		{
			name = "Teleport_NoStop";
			arg1 = "Thing Tag";
			arg2 = "Sector Tag";
			arg3 = "No Fog?";
		}
		special 215
		{
			name = "Teleport_Line";
			arg1 = "This ID", "Line ID of the marked line (in UDMF, use line ID property instead!)";
			arg2 = "Destination ID", "Line ID of the destination line";
			arg3 = "Flip 180?";
			tagged = ex_1lineid_2line;
		}
		special 156
		{
			name = "Line_SetPortal";
			arg1 = "Target Line";
#ifdef MAP_HEXEN	// Disable this arg in UDMF mode
			arg2 = "This Line";
#endif
#ifndef MAP_HEXEN
			arg2 = "reserved", "Leave this arg set to 0";
#endif
			arg3
			{
				name = "Portal type";
				type = choice;
				custom_values
				{
					0 = "Visual";
					1 = "Teleporter";
					2 = "Interactive";
					3 = "Static";
					4 = "Linked (EE)";
				}
			}
			arg4
			{
				name = "Plane anchor";
				type = choice;
				custom_values
				{
					0 = "None";
					1 = "Floors";
					2 = "Ceilings";
				}
			}
			tagged = line;
		}
	}

	group "Things"
	{
		tagged = thing;

		arg projectile_speed
		{
			name = "Speed";
			type = speed;
			custom_values
			{
				80 = "imp fireball";
				120 = "Baron slimeball";
				160 = "rocket";
				200 = "plasma cell";
			}
		}
		arg projectile_h_speed
		{
			name = "H Speed";
			type = speed;
			custom_values
			{
				80 = "imp fireball";
				120 = "Baron slimeball";
				160 = "rocket";
				200 = "plasma cell";
			}
		}
		arg projectile_v_speed
		{
			name = "H Speed";
			type = speed;
		}

		special 130
		{
			name = "Thing_Activate";
			arg1 = "Thing ID";
		}
		special 131
		{
			name = "Thing_Deactivate";
			arg1 = "Thing ID";
		}
		special 248
		{
			name = "HealThing";
			arg1 = "Thing ID";
			arg2 = "Amount";
		}
		special 17
		{
			name = "Thing_Raise";
			arg1 = "Thing ID";
		}
		special 135
		{
			name = "Thing_Spawn";
			arg1 = "Thing ID";
			arg2 = "Type", "Spawn ID of the projectile";
			arg3 = "Angle", "Byte angle: 0 = East, 64 = North, 128 = West, 192 = South";
			arg4 = "New TID", "TID to give spawned thing";
		}
		special 137
		{
			name = "Thing_SpawnNoFog";
			arg1 = "Thing ID";
			arg2 = "Type", "Spawn ID of the projectile";
			arg3 = "Angle", "Byte angle: 0 = East, 64 = North, 128 = West, 192 = South";
			arg4 = "New TID", "TID to give spawned thing";
		}
		special 139
		{
			name = "Thing_SpawnFacing";
			arg1 = "Thing ID";
			arg2 = "Type", "Spawn ID of the projectile";
			arg3 = "No Fog?";
			arg4 = "New TID", "TID to give spawned thing";
		}
		special 134
		{
			name = "Thing_Projectile";
			arg1 = "Thing ID";
			arg2 = "Type", "Spawn ID of the projectile";
			arg3 {
				name = "Angle";
				desc = "Byte angle: 0 = East, 64 = North, 128 = West, 192 = South";
				type = angle;
			}
			arg4 = $projectile_h_speed;
			arg5 = $projectile_v_speed;
		}
		special 136
		{
			name = "Thing_ProjectileGravity";
			arg1 = "Thing ID";
			arg2 = "Type", "Spawn ID of the projectile";
			arg3 = "Angle", "Byte angle: 0 = East, 64 = North, 128 = West, 192 = South";
			arg4 = $projectile_h_speed;
			arg5 = $projectile_v_speed;
		}
		special 178
		{
			name = "Thing_ProjectileAimed";
			arg1 = "Thing ID";
			arg2 = "Type", "Spawn ID of the projectile";
			arg3 = $projectile_speed;
			arg4 = "Target TID";
			arg5 = "New TID", "TID to give spawned thing";
			tagged = ex_1thing_4thing;
		}
		special 175
		{
			name = "Thing_ProjectileIntercept";
			arg1 = "Thing ID";
			arg2 = "Type", "Spawn ID of the projectile";
			arg3 = $projectile_speed;
			arg4 = "Target TID";
			arg5 = "New TID", "TID to give spawned thing";
			tagged = ex_1thing_4thing;
		}
		special 73
		{
			name = "DamageThing";
			arg1 = "Amount", "0 is a guaranteed kill";
			arg2 = $means_of_death;
			tagged = no;
		}
		special 119
		{
			name = "Thing_Damage";
			arg1 = "Thing ID";
			arg2 = "Amount";
			arg3 = $means_of_death;
		}
		special 133
		{
			name = "Thing_Destroy";
			arg1 = "Thing ID";
			arg2 = "Extreme?";
			arg3 = "Sector Tag";
			tagged = ex_1thing_3sector;
		}
		special 132
		{
			name = "Thing_Remove";
			arg1 = "Thing ID";
		}
		special 125
		{
			name = "Thing_Move";
			arg1 = "Thing ID";
			arg2 = "Destination TID";
			arg3 = "No Fog?";
			tagged = ex_1thing_2thing;
		}
		special 72
		{
			name = "ThrustThing";
			arg1 {
				name = "Angle";
				desc = "Byte angle: 0 = East, 64 = North, 128 = West, 192 = South";
				type = angle;
			}
			arg2 = "Force", "In map unit per tics";
			arg3 = "No limit", "Should be set to 1 for forces above 30";
			arg4 = "Thing ID";
			tagged = ex_4thing;
		}
		special 128
		{
			name = "ThrustThingZ";
			arg1 = "Thing ID";
			arg2 = "Force", "Vertical movement in quarter of unit per tic";
			arg3 = "Down?", "Default is up";
			arg4 = "Add?", "Default is to ignore existing vertical velocity";
		}
		special 19
		{
			name = "Thing_Stop";
			arg1 = "Thing ID";
		}
		special 79
		{
			name = "Thing_SetConversation";
			arg1 = "Thing ID";
			arg2 = "Conversation ID", "0 = remove all conversation from tagged actors";
		}
		special 127
		{
			name = "Thing_SetSpecial";
			arg1 = "Thing ID";
			arg2 = "Special";
			arg3 = "First Special Arg";
			arg4 = "Second Special Arg";
			arg5 = "Third Special Arg";
		}
		special 176
		{
			name = "Thing_ChangeTID";
			arg1 = "Thing ID";
			arg2 = "New TID";
		}
		special 177
		{
			name = "Thing_Hate";
			arg1 = "Hater TID";
			arg2 = "Hated TID";
			arg3
			{
				name = "Hate Type";
				type = choice;
				custom_values
				{
					0 = "hate once";
					1 = "retaliate against players";
					2 = "also hunt enemies";
					3 = "also hunt players";
					4 = "also hunt monsters";
					5 = "ignore player attacks";
					6 = "ignore attacks but hunt enemies";
				}
			}
		}
		special 180
		{
			name = "Thing_SetTranslation";
			arg1 = "Thing ID";
			arg2 = "Translation number";
		}
		special 229
		{
			name = "Thing_SetGoal";
			arg1 = "Thing ID";
			arg2 = "Goal TID";
			arg3 = "Delay", "Seconds before starting patrol";
			arg4 = "Don't Chase Target?", "If 1, the monster will attack enemies on its way but still go towards the goal instead of any other target";
			tagged = ex_1thing_2thing;
		}
	}

	group "Lines"
	{
		tagged = line;

#ifdef MAP_HEXEN	// Disable this special in UDMF mode
		special 121
		{
			name = "Line_SetIdentification";
			arg1 = "Line ID";
			arg2
			{
				name = "Extra Flags";
				type = flags;
				custom_flags
				{
					1 = "zone boundary";
					2 = "railing";
					4 = "block floaters";
					8 = "clip midtextures";
					16 = "wrap midtextures";
					32 = "3D middle texture";
					64 = "check switch height";
				}
			}
			arg3 = "Don't Use";
			arg4 = "Don't Use";
			arg5 = "Line ID high";
			tagged = lineid_hi5;
		}
#endif
		special 55
		{
			name = "Line_SetBlocking";
			arg1 = "Line ID";
			arg2
			{
				name = "Set Flags";
				type = flags;
				custom_flags
				{
					1 = "creatures";
					2 = "monsters";
					4 = "players";
					8 = "floaters";
					16 = "projectiles";
					32 = "everything above";
					64 = "Strife railing (only bottom 32 units block)";
					128 = "switch use";
					256 = "monster sight";
					512 = "hitscan attacks";
				}
			}
			arg3
			{
				name = "Clear Flags";
				type = flags;
				custom_flags
				{
					1 = "creatures";
					2 = "monsters";
					4 = "players";
					8 = "floaters";
					16 = "projectiles";
					32 = "everything above";
					64 = "Strife railing (only bottom 32 units block)";
					128 = "switch use";
					256 = "monster sight";
					512 = "hitscan attacks";
				}
			}
		}
		special 33 = "ForceField"; // [RH] Strife's forcefield special (148)
		special 34    // [RH] Remove Strife's forcefield from tagged sectors
		{
			name = "ClearForceField";
			arg1 = "Sector Tag";
			tagged = sector;
		}
		special 49
		{
			name = "GlassBreak";
			arg1 = "Don't Spawn Junk?", "Set to 1 to avoid spawning seven 'glass junk' actors";
			tagged = no;
		}
	}

	group "Scrollers"
	{
		tagged = no;

		arg scroll_texture_speed
		{
			name = "Speed";
			type = speed;
			// TODO 'speed' is unit per 8 tics, but texture scrolling is in units per 64 tics
			custom_values
			{
				64 = "Doom scroller";
			}
		}
		arg scroll_texture_flags
		{
			name = "Flags";
			type = flags;
			custom_flags {
				1 = "upper";
				2 = "mid";
				4 = "lower";
			}
		}
		arg scroll_flat_flags
		{
			name = "Flags";
			type = flags;
			custom_flags {
				1 = "Displacement";
				2 = "Accelerative";
				4 = "DX/DY from linedef";
			}
		}

		special 102
		{
			name = "Scroll_Texture_Up";
			arg1 = $scroll_texture_speed;
			arg2 = $scroll_texture_flags;
		}
		special 103
		{
			name = "Scroll_Texture_Down";
			arg1 = $scroll_texture_speed;
			arg2 = $scroll_texture_flags;
		}
		special 100
		{
			name = "Scroll_Texture_Left";
			arg1 = $scroll_texture_speed;
			arg2 = $scroll_texture_flags;
		}
		special 101
		{
			name = "Scroll_Texture_Right";
			arg1 = $scroll_texture_speed;
			arg2 = $scroll_texture_flags;
		}
		special 221
		{
			name = "Scroll_Texture_Both";
			arg1 = "Line ID";
			arg2 = "Left Speed";
			arg3 = "Right Speed";
			arg4 = "Down Speed";
			arg5 = "Up Speed";
			tagged = line_negative;
		}
		special 52
		{
			name = "Scroll_Wall";
			arg1 = "Line ID", "Affected lines should not be 3D middle textures";
			arg2 = "X Speed", "Horizontal speed per tic as fixed point value";
			arg3 = "Y Speed", "Vertical speed per tic as fixed point value";
			arg4 = "Line Side", "0 for front and 1 for back";
			arg5 = $scroll_texture_flags;
			tagged = line;
		}
		special 225
		{
			name = "Scroll_Texture_Offsets";
			arg1 = $scroll_texture_flags;
		}
		special 222
		{
			name = "Scroll_Texture_Model";
			arg1 = "Line ID";
			arg2
			{
				name = "Flags";
				type = flags;
				custom_flags {
					1 = "Displacement";
					2 = "Accelerative";
				}
			}
			tagged = lineid;
		}
		special 223
		{
			name = "Scroll_Floor";
			arg1 = "Sector Tag";
			arg2 = $scroll_flat_flags;
			arg3 {
				name = "Type";
				type = choice;
				custom_values {
					0 = "Scroll texture";
					1 = "Carry actors";
					2 = "Scroll and carry";
				}
			}
			arg4 = "X Speed", "128 is no scroll, 0-127 is West, 129-255 is East";
			arg5 = "Y Speed", "128 is no scroll, 0-127 is South, 129-255 is North";
			tagged = sector;
		}
		special 224
		{
			name = "Scroll_Ceiling";
			arg1 = "Sector Tag";
			arg2 = $scroll_flat_flags;
			arg3 = "Unused", "There are no scroll ceiling types, so this value is not used";
			arg4 = "X Speed", "128 is no scroll, 0-127 is West, 129-255 is East";
			arg5 = "Y Speed", "128 is no scroll, 0-127 is South, 129-255 is North";
			tagged = sector;
		}
		special 58
		{
			name = "Sector_CopyScroller";
			arg1 = "Sector Tag", "Tag of the sector to copy";
			arg2
			{
				name = "Flags";
				type = flags;
				custom_flags {
					1 = "copy ceiling scrolling";
					2 = "copy floor scrolling";
					4 = "copy actor carrying";
				}
			}
		}
	}

	group "PolyObjects"
	{
		arg polyobj_speed
		{
			name = "Speed";
			type = speed;
			// TODO are there any reasonable defaults here?
		}

		special 1
		{
			name = "PolyObject Start Line";
			arg1 = "PolyObject ID";
			arg2 = "Mirror PolyObject ID";
			arg3 = "Sound Sequence";
		}
		special 5
		{
			name = "Polyobj_ExplicitLine";
			arg1 = "PolyObject ID";
			arg2 = "Rendering Order";
			arg3 = "Mirror PolyObject ID";
			arg4 = "Sound Sequence";
			arg5 = "Line ID";				// Not in UDMF
		}
		special 2
		{
			name = "Polyobj_RotateLeft";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "Byte Angle";
		}
		special 90
		{
			name = "Polyobj_OR_RotateLeft";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "Byte Angle";
		}
		special 3
		{
			name = "Polyobj_RotateRight";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "Byte Angle";
		}
		special 91
		{
			name = "Polyobj_OR_RotateRight";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "Byte Angle";
		}
		special 4
		{
			name = "Polyobj_Move";
			arg1 = "PolyObject ID";
			arg2 = $polyobj_speed;
			arg3 = "Byte Angle";
			arg4 = "Distance";
		}
		special 92
		{
			name = "Polyobj_OR_Move";
			arg1 = "PolyObject ID";
			arg2 = $polyobj_speed;
			arg3 = "Byte Angle";
			arg4 = "Distance";
		}
		special 6
		{
			name = "Polyobj_MoveTimes8";
			arg1 = "PolyObject ID";
			arg2 = $polyobj_speed;
			arg3 = "Byte Angle";
			arg4 = "Eighth of Distance";
		}
		special 93
		{
			name = "Polyobj_OR_MoveTimes8";
			arg1 = "PolyObject ID";
			arg2 = $polyobj_speed;
			arg3 = "Byte Angle";
			arg4 = "Eighth of Distance";
		}
		special 7
		{
			name = "Polyobj_DoorSwing";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "Byte Angle";
			arg4 = "Close Delay";
		}
		special 8
		{
			name = "Polyobj_DoorSlide";
			arg1 = "PolyObject ID";
			arg2 = $polyobj_speed;
			arg3 = "Byte Angle";
			arg4 = "Distance";
			arg5 = "Close Delay";
		}
		special 86
		{
			name = "Polyobj_MoveToSpot";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "Spot TID";
		}
		special 59
		{
			name = "Polyobj_OR_MoveToSpot";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "Spot TID";
		}
		special 88
		{
			name = "Polyobj_MoveTo";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "X Position";
			arg4 = "Y Position";
		}
		special 89
		{
			name = "Polyobj_OR_MoveTo";
			arg1 = "PolyObject ID";
			arg2 = "Speed";
			arg3 = "X Position";
			arg4 = "Y Position";
		}
		special 87
		{
			name = "Polyobj_Stop";
			arg1 = "PolyObject ID";
		}
	}

	group "Exits"
	{
		special 243
		{
			name = "Exit_Normal";
			arg1 = "Player Start", "Value of first argument of player start";
		}
		special 244
		{
			name = "Exit_Secret";
			arg1 = "Player Start", "Value of first argument of player start";
		}
		special 74
		{
			name = "Teleport_NewMap";
			arg1 = "Map Levelnum";
			arg2 = "Player Start", "Value of first argument of player start";
			arg3 = "Keep Facing";
		}
		special 75 = "Teleport_EndGame";
	}

	group "Renderer"
	{
		special 9 = "Line_Horizon";   // [RH] draw one-sided wall at horizon
		special 182 = "Line_Mirror";
		special 16
		{
			name = "Transfer_WallLight";
			arg1 = "Line ID";
			arg2
			{
				name = "Flags";
				type = flags;
				custom_flags
				{
					1 = "transfer to front side";
					2 = "transfer to back side";
					4 = "absolute light transfer (ignore fake contrast)";
				}
			}
			tagged = line;
		}
		special 210
		{
			name = "Transfer_FloorLight";
			arg1 = "Sector Tag";
			tagged = sector;
		}
		special 211
		{
			name = "Transfer_CeilingLight";
			arg1 = "Sector Tag";
			tagged = sector;
		}
		special 50
		{
			name = "ExtraFloor_LightOnly";
			arg1 = "Sector Tag";
			arg2 {
				name = "Light Type";
				type = choice;
				custom_values {
					0 = "Control sector ceiling to top of other type 0 EF_LO";
					1 = "Tagged ceiling to control sector floor";
					2 = "Control sector ceiling to top of other EF_LO (any type)";
				}
			}
			tagged = sector;
		}
		special 57
		{
			name = "Sector_SetPortal";
			arg1 = "Sector Tag", "Tag of the sectors in which the portal is seen. Sectors seen through the portal should not have this tag.";
			arg2 {
				name = "Portal Type";
				type = choice;
				custom_values {
					0 = "Normal view";
					1 = "Transferred view (copy another portal)";
					2 = "Eternity-style skybox portal";
				}
			}
			arg3 {
				name = "Plane";
				type = choice;
				custom_values {
					0 = "Floor portal";
					1 = "Ceiling portal";
					2 = "Floor & ceiling portal";
				}
			}
			arg4 = "Misc", "Type 0: 1 if line belongs to sector seen, 0 if it belongs to sector viewing; Type 1: sector tag to copy";
			arg5 = "Alpha", "Translucency value of the portal";
			tagged = sector;
		}
		special 98
		{
			name = "Sector_SetTranslucent";
			arg1 = "Sector Tag", "Tag of sectors containing portals to affect";
			arg2 = "Plane", "0 = Floor, 1 = ceiling";
			arg3 = "Alpha", "On a scale of 0--255 from fully transparent to fully opaque";
			// Additive transparency is not implemented at the moment
			//arg4 = "Transparency Type", "0 for normal, 1 for additive transparency";
		}
		special 157
		{
			name = "SetGlobalFogParameter (OpenGL)";
			arg1 = "Property", "0 = fog density; 1 = outside fog density; 2 = sky fog";
			arg2 = "Value";
		}
		special 159
		{
			name = "Sector_SetPlaneReflection (OpenGL)";
			arg1 = "Sector Tag";
			arg2 = "Floor Reflection", "On a 0--255 scale (255 is fully reflective)";
			arg3 = "Ceiling Reflection", "On a 0--255 scale (255 is fully reflective)";
			tagged = sector;
		}
		special 208
		{
			name = "TranslucentLine";
			arg1 = "Line ID", "Lines to affect (0 = this one)";
			arg2 = "Alpha", "On a scale of 0--255 from fully transparent to fully opaque";
			arg3 = "Additive?";
			arg4 = "Extra flags", "Do not use this in a UDMF map";
			tagged = lineid;
		}
		special 209
		{
			name = "Transfer_Heights";
			arg1 = "Sector Tag";
			arg2 {
				name = "Flags";
				type = flags;
				custom_flags {
					1 = "always use transferred heights";
					2 = "only draw fake floor";
					4 = "improved texture control";
					8 = "swimmable";
					16 = "invisible fake planes";
					32 = "don't transfer light";
				}
			}
			tagged = sector;
		}
		/*special 53
		{
			// This special can only be used in ACS
			name = "Line_SetTextureOffset";
		}*/
		/*special 56
		{
			// This special can only be used in ACS
			name = "Line_SetTextureScale";
		}*/
	}

	group "Scripting"
	{
		special 80
		{
			name = "ACS_Execute";
			arg1 = "Script Number";
			arg2 = "Map Levelnum", "Use 0 for current map";
			arg3 = "First Arg", "First argument passed to the script";
			arg4 = "Second Arg", "Second argument passed to the script";
			arg5 = "Third Arg", "Third argument passed to the script";
		}
		special 83
		{
			name = "ACS_LockedExecute";
			arg1 = "Script Number";
			arg2 = "Map Levelnum", "Use 0 for current map";
			arg3 = "First Arg", "First argument passed to the script";
			arg4 = "Second Arg", "Second argument passed to the script";
			arg5 = "Lock Number", "Lock value as defined in LOCKDEFS";
		}
		special 85
		{
			name = "ACS_LockedExecuteDoor";
			arg1 = "Script Number";
			arg2 = "Map Levelnum", "Use 0 for current map";
			arg3 = "First Arg", "First argument passed to the script";
			arg4 = "Second Arg", "Second argument passed to the script";
			arg5 = "Lock Number", "Lock value as defined in LOCKDEFS";
		}
		special 84
		{
			name = "ACS_ExecuteWithResult";
			arg1 = "Script Number";
			arg2 = "First Arg", "First argument passed to the script";
			arg3 = "Second Arg", "Second argument passed to the script";
			arg4 = "Third Arg", "Third argument passed to the script";
		}
		special 226
		{
			name = "ACS_ExecuteAlways";
			arg1 = "Script Number";
			arg2 = "Map Levelnum", "Use 0 for current map";
			arg3 = "First Arg", "First argument passed to the script";
			arg4 = "Second Arg", "Second argument passed to the script";
			arg5 = "Third Arg", "Third argument passed to the script";
		}
		special 81
		{
			name = "ACS_Suspend";
			arg1 = "Script Number";
			arg2 = "Map Levelnum", "Use 0 for current map";
		}
		special 82
		{
			name = "ACS_Terminate";
			arg1 = "Script Number";
			arg2 = "Map Levelnum", "Use 0 for current map";
		}
		special 158
		{
			name = "FS_Execute";
			arg1 = "Script Number", "FraggleScript script number";
			arg2 = "Front Side Only?";
			arg3 = "Lock Number", "Lock value as defined in LOCKDEFS";
			arg4 = "Remote Message?", "If locked, determines whether unsuccessful use gives the 'open door' or 'activate object' message";
		}

		arg which_players
		{
			name = "Who";
			type = choice;
			custom_values
			{
				0 = "activator only";
				1 = "all players";
			}
		}
		special 191
		{
			name = "SetPlayerProperty";
			arg1 = $which_players;
			arg2
			{
				name = "Set?";
				type = choice;
				custom_values
				{
					0 = "turn off";
					1 = "turn on";
				}
			}
			arg3
			{
				name = "Property";
				type = choice;
				custom_values
				{
					0 = "cannot move";
					1 = "not auto targeted by monsters";
					2 = "instant switch";
					3 = "fly";
					4 = "totally frozen";
					5 = "invulnerable";
					16 = "buddha mode (cannot drop below 1 health)";
				}
			}
		}
		special 237
		{
			name = "ChangeCamera";
			arg1 = "Thing ID", "TID of the camera object";
			arg2 = $which_players;
			arg3 = "Move Reverts?", "Set to 1 if movement should cancel the special";
			tagged = thing;
		}
		special 15 = "Autosave";   // [RH] Save the game *now*
		special 179
		{
			name = "ChangeSkill";
			arg1 = "Skill Number", "Number of the new skill (standard go from 0 for easiest to 5 for hardest)";
		}
		special 18
		{
			name = "StartConversation";
			arg1 = "Thing ID", "TID of the talking actor";
			arg2 = "Face Talker?", "Player turns to face talker if non-null";
		}
		special 120  // Earthquake
		{
			name = "Radius_Quake";
			arg1 = "Intensity", "Tremor intensity on a 1--9 scale";
			arg2 = "Duration", "In tics";
			arg3 = "Damage Radius", "Radius of damage in 64x64 cells";
			arg4 = "Tremor Radius", "Radius of tremor in 64x64 cells";
			arg5 = "Thing ID", "TID of the focus (0 = activator)";
			tagged = ex_5thing;
		}
		special 129
		{
			name = "UsePuzzleItem";
			arg1 = "Puzzle Number", "Value of the the item's PuzzleItem.Number property";
			arg2 = "Script Number", "Script to run if item successfully used";
			arg3 = "First Arg", "First argument passed to the script";
			arg4 = "Second Arg", "Second argument passed to the script";
			arg5 = "Third Arg", "Third argument passed to the script";
		}
		special 173
		{
			name = "NoiseAlert";
			arg1 = "Target TID", "TID of the actor that is to be attacked by alerted monsters (0 = activator)";
			arg2 = "Emitter TID", "TID of the actor from which the alert emanates (0 = activator)";
			tagged = ex_1thing_2thing;
		}
		special 174
		{
			name = "SendToCommunicator";
			arg1 = "Voc ID", "Number of the VOC lump to play and LOG lump to print";
			arg2 = "Front Only?", "If non-zero, only activate on front side of the line";
			arg3 = "Identity?", "If non-zero, also print the name of who sent the message";
			arg4 = "No Log Message?", "If non-zero, the message will not be placed in the objectives popup";
		}
	}
}
#endif // NAMESPACE_ZDOOM

#ifndef NAMESPACE_ZDOOM
action_specials
{
	group "Scripting"
	{
		tagged = no;
		
		special 273 = "WR FS_Execute";
		special 274 = "W1 FS_Execute";
		special 275 = "W1 FS_Execute (Frontside only)";
		special 276 = "SR FS_Execute";
		special 277 = "S1 FS_Execute";
		special 278 = "GR FS_Execute";
		special 279 = "G1 FS_Execute";
	}
	group "Renderer"
	{
		tagged = no;
		
		special 336 = "-- Line Mirror";
		special 337 = "-- Line Horizon";
	}
	group "Transfers"
	{
		tagged = sector;
		
		special 280 = "-- Transfer Heights (swimmable)";
		special 350 = "-- Transfer_Heights (only fake the floor)";
		special 351 = "-- Transfer_Heights (fake and clip only the floor)";
	}
	group "3D Floors"
	{
		tagged = sector;
		
		special 281 = "-- 3D Floor (solid, opaque)";
		special 289 = "-- 3D Floor (solid, opaque, no light effects)";
		special 300 = "-- 3D Floor (solid, 50% translucent, no light effects)";
		special 301 = "-- 3D Floor (swimmable, 50% translucent)";
		special 302 = "-- 3D Floor (non-solid, 50% translucent, foggy)";
		special 303 = "-- 3D Floor (non-solid, invisible)";
		special 304 = "-- 3D Floor (swimmable, opaque)";
		special 305 = "-- 3D Floor (non-solid, invisble)";
		special 306 = "-- 3D Floor (solid, invisible)";
		special 400 = "-- 3D Floor (solid, opaque)";
		special 401 = "-- 3D Floor (solid, opaque, monsters see-through)";
		special 402 = "-- 3D Floor (solid, opaque, shoot-through)";
		special 403 = "-- 3D Floor (swimmable, opaque)";
		special 404 = "-- 3D Floor (swimmable, 80% opaque)";
		special 405 = "-- 3D Floor (swimmable, 60% opaque)";
		special 406 = "-- 3D Floor (swimmable, 40% opaque)";
		special 407 = "-- 3D Floor (swimmable, 20% opaque)";
		special 408 = "-- 3D Floor (swimmable, invisible)";
		special 413 = "-- 3D Floor (solid, flat, opaque)";
		special 414 = "-- 3D Floor (solid, flat, 80% opaque)";
		special 415 = "-- 3D Floor (solid, flat, 60% opaque)";
		special 416 = "-- 3D Floor (solid, flat, 40% opaque)";
		special 417 = "-- 3D Floor (solid, flat, 20% opaque)";
	}
	group "Sector Effects"
	{
		tagged = sectors;
		
		special 282 = "-- Set Sector Light & Fog", "Set colors from RRGGBB hex values as front side textures: upper for light, lower for fog.";
		special 333 = "-- Set Gravity from Length of Line";
		special 334 = "-- Set Sector Light & Fog", "Set colors from RRGGBB hex values as front side textures: upper for light, lower for fog.";
		special 335 = "-- Set Sector Damage from Length of Line";
	}
	group "Wagglers"
	{
		tagged = sectors;
		
		special 338 = "W1 Floor_Waggle (amplitude 24)";
		special 339 = "W1 Floor_Waggle (amplitude 12)";
	}
	group "Scrollers"
	{
		group "Affecting sectors"
		{
			tagged = sector;
			special 352 = "-- Copy ceiling scoller";
			special 353 = "-- Copy floor scroller";
			special 354 = "-- Copy carrying floor scroller";
		}
		group "Affecting lines"
		{
			tagged = no;
			
			special 48	= "-- Scroll Texture Left";
			special 422 = "-- Scroll Texture Right";
			special 423 = "-- Scroll Texture Up";
			special 424 = "-- Scroll Texture Down";
			special 425 = "-- Scroll Texture Left & Up";
			special 426 = "-- Scroll Texture Left & Down";
			special 427 = "-- Scroll Texture Right & Up";
			special 428 = "-- Scroll Texture Right & Down";
		}
	}
	group "Translucent Lines"
	{
		tagged = lines;
		
		special 284 = "-- Translucent Line (50% opaque)";
		special 285 = "-- Translucent Line (75% opaque)";
		special 286 = "-- Translucent Line (25% opaque)";
		special 287 = "-- Translucent Line (50% opaque, additive)";
		special 288 = "-- Translucent Line (opaque)";
		special 409 = "-- Translucent Line (80% opaque)";
		special 410 = "-- Translucent Line (60% opaque)";
		special 411 = "-- Translucent Line (40% opaque)";
		special 412 = "-- Translucent Line (20% opaque)";
	}
	group "Slopes"
	{
		tagged = sector_and_back;
		
		special 340 = "-- Slope front floor";
		special 341 = "-- Slope front ceiling";
		special 342 = "-- Slope front floor and ceiling";
		special 343 = "-- Slope back floor";
		special 344 = "-- Slope back ceiling";
		special 345 = "-- Slope back floor and ceiling";
		special 346 = "-- Slope back floor and front ceiling";
		special 347 = "-- Slope front floor and back ceiling";
	}
	group "Floors"
	{
		group "Move Up"
		{
			tagged = sector;

			special 434 = "S1 Floor Up 2";
			special 435 = "SR Floor Up 2";
			special 436 = "W1 Floor Up 2";
			special 437 = "WR Floor Up 2";
			special 438 = "G1 Floor Up 2";
			special 439 = "GR Floor Up 2";
		}
	}
	group "Autosave"
	{
		tagged = no;
		
		special 348 = "W1 Autosave";
		special 349 = "S1 Autosave";
	}
}
#endif // !NAMESPACE_ZDOOM
