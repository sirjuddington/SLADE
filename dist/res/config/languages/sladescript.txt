
sladescript : lua
{
	name = "SLADE Script";
	case_sensitive = true;

	properties =
	{
		// Namespaces
		App, Archives, Game, SplashWindow
	}

	types =
	{
		Archive, ArchiveDir, ArchiveEntry, ArchiveFormat, EntryType,
		ThingType,
		Map, MapEditor, MapLine, MapObject, MapSector, MapSide, MapThing, MapVertex,
		Colour, Plane, Point
	}

	functions
	{
		// App namespace
						App.logMessage = "string message";
		string			App.globalError;
						App.messageBox = "string title, string message";
						App.messageBoxExt = "string title, string message, string detail";
		string			App.promptString = "string title, string message, string default_value";
		number			App.promptNumber = "string title, string message, number default_value, number min, number max";
		boolean			App.promptYesNo = "string title, string message";
		string			App.browseFile = "string title, string extensions, string filename";
		string[]		App.browseFiles = "string title, string extensions";
		Archive			App.currentArchive;
		ArchiveEntry	App.currentEntry;
		ArchiveEntry[]	App.currentEntrySelection;
						App.showArchive = "Archive archive";
						App.showEntry = "ArchiveEntry entry";
		MapEditor		App.mapEditor;

		// Archives namespace
		Archive[]		Archives.all;
		Archive			Archives.create = "string format_id";
		Archive			Archives.openFile = "string path";
		boolean			Archives.close = "Archive archive", "number index";
						Archives.closeAll;
		string			Archives.fileExtensionsString;
		Archive			Archives.baseResource;
		string[]		Archives.baseResourcePaths;
		boolean			Archives.openBaseResource = "number index";
		Archive			Archives.programResource;
		string[]		Archives.recentFiles;
		ArchiveEntry[]	Archives.bookmarks;
						Archives.addBookmark = "ArchiveEntry entry";
		boolean			Archives.removeBookmark = "ArchiveEntry entry";

		// Game namespace
		ThingType	Game.thingType = "number type";

		// SplashWindow namespace
				SplashWindow.show = "string message, [boolean progress]";
				SplashWindow.hide;
				SplashWindow.update;
		number	SplashWindow.progress;
				SplashWindow.setMessage = "string message";
				SplashWindow.setProgressMessage = "string message";
				SplashWindow.setProgress = "number progress";

		// Archive type
		ArchiveDir		Archive.getDir = "string path";
		ArchiveEntry	Archive.createEntry = "string full_path, number position";
		ArchiveEntry	Archive.createEntryInNamespace = "string name, string namespace";
		boolean			Archive.removeEntry = "ArchiveEntry entry";
		boolean			Archive.renameEntry = "ArchiveEntry entry, string name";
		boolean			Archive.save = "[string path]";

		// ArchiveEntry type
		string	ArchiveEntry.formattedName = "[boolean include_path], [boolean include_extension], [boolean upper_case]";
		string	ArchiveEntry.formattedSize;
		boolean	ArchiveEntry.importFile = "string path";
		boolean	ArchiveEntry.importEntry = "ArchiveEntry entry";
		boolean ArchiveEntry.importData = "string data";
		boolean ArchiveEntry.exportFile = "string path";

		// MapEditor type
		MapVertex[]	MapEditor.selectedVertices = "[boolean try_highlight]";
		MapLine[]	MapEditor.selectedLines = "[boolean try_highlight]";
		MapSector[]	MapEditor.selectedSectors = "[boolean try_highlight]";
		MapThing[]	MapEditor.selectedThings = "[boolean try_highlight]";
					MapEditor.clearSelection;
					MapEditor.select = "MapObject object, [boolean select]";
					MapEditor.setEditMode = "number mode, number sector_mode";
		
		// MapLine type
		boolean	MapLine.flag = "string flag_name";
				MapLine.flip = "[boolean swap_sides]";
		
		// MapObject type
		boolean	MapObject.hasProperty = "string name";
		boolean	MapObject.boolProperty = "string name";
		number	MapObject.intProperty = "string name";
		number	MapObject.floatProperty = "string name";
		string	MapObject.stringProperty = "string name";
				MapObject.setBoolProperty = "string name, boolean value";
				MapObject.setIntProperty = "string name, number value";
				MapObject.setFloatProperty = "string name, number value";
				MapObject.setStringProperty = "string name, string value";
		
		// MapSector type
		boolean	MapSector.containsPoint = "Point position";

		// MapThing type
		boolean	MapThing.flag = "string flag_name";
				MapThing.setAnglePoint = "Point position";
		
		// Plane type
		number	Plane.heightAt = "Point position";
	}
}
